---
- name: set defaults
  set_fact:
    vm_hostname:     "{{ vm_hostname     | default('') }}"
    vm_name:         "{{ vm_name         | default('WindowsVM') }}"
    vm_guest_id:     "{{ vm_guest_id     | default('windows9Server64Guest') }}"
    vm_num_cpus:     "{{ vm_num_cpus     | default(2) }}"
    vm_memory_mb:    "{{ vm_memory_mb    | default(2048) }}"
    vm_disk_gb:      "{{ vm_disk_gb      | default(40) }}"
    vm_address:      "{{ vm_address      | default('') }}"
    vm_netmask_cidr: "{{ vm_netmask_cidr | default('') }}"
    vm_gateway:      "{{ vm_gateway      | default('') }}"    
    vm_dns_server:   "{{ vm_dns_server   | default('') }}" 
    vm_domain:       "{{ vm_domain       | default('') }}" 
    vm_username:     "{{ vm_username     | default('.\\Administrator') }}" # local administrator account name
    vm_password_old: "{{ vm_password_old | default('Changeme!') }}"
    vm_password_new: "{{ vm_password_new | default('P@ssw0rd') }}"    

- name: set defaults Server2019eval
  set_fact:
    version: "Server2019eval"
    # install_iso: "17763.737.190906-2324.rs5_release_svc_refresh_SERVER_EVAL_x64FRE_en-us_1.iso"
    install_iso: "17763.3650.221105-1748.rs5_release_svc_refresh_SERVER_EVAL_x64FRE_en-us.iso"
    install_iso_url: "https://software-download.microsoft.com/download/pr/17763.3650.221105-1748.rs5_release_svc_refresh_SERVER_EVAL_x64FRE_en-us.iso"
  when: version|default(Server2019eval) == "Server2019eval"

- name: set defaults Server2019Essentialseval
  set_fact:
    install_iso: "17763.737.190906-2324.rs5_release_svc_refresh_SERVERESSENTIALS_OEM_x64FRE_en-us_1.iso"
    install_iso_url: "https://software-download.microsoft.com/download/pr/17763.737.190906-2324.rs5_release_svc_refresh_SERVERESSENTIALS_OEM_x64FRE_en-us_1.iso"
  when: version == "Server2019Essentialseval"

- name: set defaults Server2016eval
  set_fact:
    install_iso: "Windows_Server_2016_Datacenter_EVAL_en-us_14393_refresh.ISO"
    install_iso_url: "http://software-download.microsoft.com/download/pr/Windows_Server_2016_Datacenter_EVAL_en-us_14393_refresh.ISO"
  when: version == "Server2016eval"

- name: set defaults Server2012R2eval
  set_fact:
    install_iso: "9600.17050.WINBLUE_REFRESH.140317-1640_X64FRE_SERVER_EVAL_EN-US-IR3_SSS_X64FREE_EN-US_DV9.ISO"
    install_iso_url: "http://download.microsoft.com/download/6/2/A/62A76ABB-9990-4EFC-A4FE-C7D698DAEB96/9600.17050.WINBLUE_REFRESH.140317-1640_X64FRE_SERVER_EVAL_EN-US-IR3_SSS_X64FREE_EN-US_DV9.ISO"
  when: version == "Server2012R2eval"

- name: set defaults Windows7eval
  set_fact:
    vm_guest_id: "windows7_64Guest"
    install_iso: "7600.16385.090713-1255_x64fre_enterprise_en-us_EVAL_Eval_Enterprise-GRMCENXEVAL_EN_DVD.iso"
    install_iso_url: "http://care.dlservice.microsoft.com/dl/download/evalx/win7/x64/EN/7600.16385.090713-1255_x64fre_enterprise_en-us_EVAL_Eval_Enterprise-GRMCENXEVAL_EN_DVD.iso"
  when: version == "Windows7eval"

- name: Create kickstart ISO
  community.general.iso_create:
    src_files:
      - "{{unattend_file}}"
    dest_iso: "{{ role_path }}/files/{{config_iso}}"
    interchange_level: 3
    joliet: 3
    vol_ident: UNATTEND
  delegate_to: localhost

- name: Copy kickstart iso to datastore
  community.vmware.vsphere_copy:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'   
    validate_certs: no 
    src: "{{ role_path }}/files/{{config_iso}}"
    datacenter: "{{ vcenter_datacenter }}"
    datastore: "{{ vm_datastore }}"
    path: "{{ config_iso }}"
  delegate_to: localhost
  ignore_errors: true #if the playbook is being re-run while the vm is on, the iso cannot be replaced

- name: Check if install ISO exists
  community.vmware.vsphere_file:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'  
    validate_certs: no
    datacenter: "{{vcenter_datacenter}}"
    datastore: "{{ iso_datastore }}"
    path: "{{ install_iso }}"
    state: file
  register: install_iso_exists
  delegate_to: localhost
  ignore_errors: true 

- name: delete kickstart ISO
  ansible.builtin.file:
    path: "{{ role_path }}/files/{{config_iso}}"
    state: absent
  delegate_to: localhost

- name: Add ESXi Host to Ansible Hosts for SSH
  add_host:
    name: '{{ esxi_address }}'
    group: "esx"
    ansible_user: '{{ esxi_username }}'
    ansible_password: '{{ esxi_password }}'
    ansible_ssh_common_args: '-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'
  when: install_iso_exists.failed

- name: Enable ESX SSH (TSM-SSH)
  community.vmware.vmware_host_service_manager:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'  
    validate_certs: no 
    esxi_hostname: '{{ esxi_hostname }}'
    service_name: TSM-SSH
    state: present
  register: tsm_ssh_service
  delegate_to: localhost
  when: install_iso_exists.failed

- name: Enable ESX Shell (TSM)
  community.vmware.vmware_host_service_manager:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'   
    validate_certs: no 
    esxi_hostname: '{{ esxi_hostname }}'
    service_name: TSM
    state: present
  register: tsm_service
  delegate_to: localhost
  when: install_iso_exists.failed

- name: Download the Windows Server ISO
  shell: 'wget -P /vmfs/volumes/{{ iso_datastore }} {{ install_iso_url }}'
  args:
    creates: '/vmfs/volumes/{{ iso_datastore }}/{{ install_iso }}'
  delegate_to: '{{ esxi_address }}'
  when: install_iso_exists.failed
- name: Disable ESX SSH (TSM-SSH)
  community.vmware.vmware_host_service_manager:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'  
    validate_certs: no 
    esxi_hostname: '{{ esxi_hostname }}'
    service_name: TSM-SSH
    state: absent
  delegate_to: localhost
  when: tsm_ssh_service.changed

- name: Disable ESX Shell (TSM)
  community.vmware.vmware_host_service_manager:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'   
    validate_certs: no 
    esxi_hostname: '{{ esxi_hostname }}'
    service_name: TSM
    state: absent
  delegate_to: localhost
  when: tsm_service.changed

- debug: msg="vm_network - {{ vm_network }}" 
- name: Create VM
  community.vmware.vmware_guest:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}' 
    validate_certs: no 
    datacenter: "{{vcenter_datacenter}}"
    cluster: '{{vcenter_cluster}}'    
    folder: /
    name: '{{ vm_name }}'
    state: present
    guest_id: '{{vm_guest_id}}'
    cdrom:
        - controller_number: 0
          unit_number: 0
          state: present
          type: iso
          iso_path: '[{{ iso_datastore }}] {{ install_iso }}'
        - controller_number: 0
          unit_number: 1
          state: present
          type: iso
          iso_path: '[{{ vm_datastore }}] {{ config_iso }}'
    disk:
    - size_gb: '{{ vm_disk_gb|int }}'
      type: thin
      datastore: '{{ vm_datastore }}'
    hardware:
      memory_mb: '{{ vm_memory_mb|int }}'
      num_cpus: '{{ vm_num_cpus|int }}'
      scsi: lsilogicsas
    networks:
    - name: '{{ vm_network }}'
      device_type: e1000
    wait_for_ip_address: no
  delegate_to: localhost
  register: deploy_vm

- name: Set boot order
  community.vmware.vmware_guest_boot_manager:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'   
    validate_certs: no 
    name: '{{ vm_name }}'
    boot_delay: 1000
    enter_bios_setup: False
    boot_retry_enabled: True
    boot_retry_delay: 20000
    boot_firmware: bios
    secure_boot_enabled: False
    boot_order:
      - cdrom
      - disk
      - ethernet
      - floppy
  delegate_to: localhost
  register: vm_boot_order

# - set_fact:
#     serial_ports:
#       - type: 'pipe'
#         pipe_name: '\\.\pipe\{{ vm_name }}_com1'
#         endpoint: 'client'
#       - type: 'pipe'
#         pipe_name: '\\.\pipe\{{ vm_name }}_com2'
#         endpoint: 'client'
#   when: 
#     - serial_ports|default(false)

# Create serial ports
- name: Create multiple serial ports with Backing type - network, pipe, device and file
  community.vmware.vmware_guest_serial_port:
    hostname: "{{ vcenter_address }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    validate_certs: no 
    name: '{{ vm_name }}'
    backings: "{{serial_ports}}"
  delegate_to: localhost
  register: create_serial_ports
  when: 
    - serial_ports is defined
    - serial_ports is not false

- name: Power-On the virtual machine
  community.vmware.vmware_guest_powerstate:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'   
    validate_certs: no 
    name: '{{ vm_name }}'
    state: powered-on
  delegate_to: localhost
  register: powerstate

- name: Wait for VMware tools to become available 
  community.vmware.vmware_guest_tools_wait:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}' 
    validate_certs: no 
    name: '{{ vm_name }}'
  delegate_to: localhost
  retries: 10
  delay: 60
  register: result           
  until: result is succeeded 

- name: Set password via vmware_vm_shell
  community.vmware.vmware_vm_shell:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'   
    validate_certs: no 
    vm_username: "{{vm_username}}"
#    vm_password: '{{ vm_password_new }}'
    vm_id: '{{ vm_name }}'
    vm_password: '{{ vm_password_old }}'
    vm_shell: 'c:\windows\system32\windowspowershell\v1.0\powershell.exe'
    vm_shell_args: '-command "(net user Administrator {{ vm_password_new }})"'
    wait_for_process: true
  delegate_to: localhost
  register: setpassword
  ignore_errors: yes

- name: Find the VM's IP Address via VMware tools
  community.vmware.vmware_guest_info:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'   
    validate_certs: no 
    datacenter: "{{vcenter_datacenter}}"
    name: '{{ vm_name }}'
  delegate_to: localhost
  register: vmfacts

- set_fact:
    _ipv4: "{{ vmfacts['instance']['ipv4'] | default('')}}"

#- debug: msg="IP Address - {{ vmfacts['instance'] }}"  

- name: Set static IP address
  community.vmware.vmware_vm_shell:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'   
    validate_certs: no 
    vm_username: "{{vm_username}}"
    vm_password: '{{ vm_password_new }}'
    vm_id: '{{ vm_name }}'
    vm_shell: 'c:\windows\system32\windowspowershell\v1.0\powershell.exe'
    vm_shell_args: "{{item}}"
    wait_for_process: true
  delegate_to: localhost
  retries: 6
  delay: 10 
  register: result           
  until: result is succeeded      
  loop:
    - "-command \"(new-netipaddress -InterfaceAlias Ethernet0 -IPAddress {{ vm_address }} -prefixlength {{vm_netmask_cidr}} -defaultgateway {{ vm_gateway }})\""
  when: 
    - vm_address != ""
    - vm_address != "{{_ipv4}}"

- name: Set DNS Server
  community.vmware.vmware_vm_shell:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'   
    validate_certs: no 
    vm_username: "{{vm_username}}"
    vm_password: '{{ vm_password_new }}'
    vm_id: '{{ vm_name }}'
    vm_shell: 'c:\windows\system32\windowspowershell\v1.0\powershell.exe'
    vm_shell_args: "{{item}}"
    wait_for_process: true
  delegate_to: localhost
  retries: 6
  delay: 10 
  register: result           
  until: result is succeeded      
  loop:
    - "-command \"(Set-DnsClientServerAddress -InterfaceAlias Ethernet0 -ServerAddresses {{ vm_dns_server }})\""
  when: 
    - vm_dns_server != ""

- name: Enable RDP
  community.vmware.vmware_vm_shell:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'  
    validate_certs: no 
    vm_username: "{{vm_username}}"
    vm_password: '{{ vm_password_new }}'
    vm_id: '{{ vm_name }}'
    vm_shell: 'c:\windows\system32\windowspowershell\v1.0\powershell.exe'
    vm_shell_args: "{{item}}"
    wait_for_process: true
  delegate_to: localhost
  retries: 6
  delay: 10 
  register: result           
  until: result is succeeded      
  loop:
    - "-command \"(set-ItemProperty -Path 'HKLM:\\System\\CurrentControlSet\\Control\\Terminal Server' -name fDenyTSConnections -Value 0)\""
    - "-command \"(Enable-NetFirewallRule -DisplayGroup 'Remote Desktop')\""

- name: check hostname
  community.vmware.vmware_vm_shell:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'  
    validate_certs: no 
    vm_username: "{{vm_username}}"
    vm_password: '{{ vm_password_new }}'
    vm_id: '{{ vm_name }}'
    vm_shell: 'c:\windows\system32\windowspowershell\v1.0\powershell.exe'
    vm_shell_args: " -command \"({{item}})\""
    wait_for_process: true
  delegate_to: localhost
  register: checkhostname           
  ignore_errors: true
  loop:
    - "$result=$(if($env:COMPUTERNAME -ne '{{vm_hostname}}'){throw})"

- name: Rename Computer
  community.vmware.vmware_vm_shell:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'  
    validate_certs: no 
    vm_username: "{{ vm_username }}"
    vm_password: '{{ vm_password_new }}'
    vm_id: '{{ vm_name }}'
    vm_shell: 'c:\windows\system32\windowspowershell\v1.0\powershell.exe'
    vm_shell_args: "{{item}}"
    wait_for_process: true
  delegate_to: localhost
  retries: 6
  delay: 10 
  register: result           
  until: result is succeeded      
  loop:
    - "-command \"(Rename-Computer -NewName {{ vm_hostname }})\""
  when: 
    - vm_hostname != ""
    - checkhostname is failed

- name: Reboot-Guest
  community.vmware.vmware_guest_powerstate:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'   
    validate_certs: no 
    name: '{{ vm_name }}'
    state: reboot-guest
  delegate_to: localhost
  register: deploy
  when: 
    - vm_hostname != ""
    - checkhostname is failed

- name: Wait for 30 seconds
  wait_for: timeout=30
  delegate_to: localhost
  when: vm_hostname != ""
- name: Wait for VMware tools to become available by name
  community.vmware.vmware_guest_tools_wait:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'  
    validate_certs: no 
    name: '{{ vm_name }}'
  delegate_to: localhost
  retries: 3
  delay: 15
  register: result           
  until: result is succeeded 
  when: 
    - vm_hostname != ""
    - checkhostname is failed

- name: dcpromo
  include_tasks: dcpromo.yml
  vars:
    # vm_name: '{{ vm_name }}'
    # vm_username: '{{ vm_username }}'
    vm_password: '{{ vm_password_new }}'
    # vm_dns_server: "{{lab_lan1_dns_ip}}"
    # vm_domain: "{{lab_domain_name}}"
  when: dcpromo|default(false)

- name: Run extra commands in powershell
  community.vmware.vmware_vm_shell:
    hostname: '{{ vcenter_address }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    validate_certs: no
    vm_username: '{{ vm_username }}'
    vm_password: '{{ vm_password_new }}'
    vm_id:       '{{ vm_name }}'
    vm_shell:    'c:\windows\system32\windowspowershell\v1.0\powershell.exe'
    vm_shell_args: " -command \"({{item}})\""
    wait_for_process: true
  delegate_to: localhost
  retries: 3
  delay: 10
  register: result
  until: result is succeeded
  ignore_errors: true
  loop: "{{extra_commands}}"
  when: extra_commands is defined

# - name: Find the VM's IP Address via VMware tools
#   community.vmware.vmware_guest_info:
#     hostname: '{{ vcenter_address }}'
#     username: '{{ vcenter_username }}'
#     password: '{{ vcenter_password }}'   
#     validate_certs: no 
#     datacenter: "{{vcenter_datacenter}}"
#     name: '{{ vm_name }}'
#   delegate_to: localhost
#   register: vmfacts
# - debug: msg="IP Address - {{ vmfacts['instance']['ipv4'] }}"  
